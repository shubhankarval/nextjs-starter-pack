name: Publish NPM Package

on:
  push:
    branches:
      - main
    paths:
      - "index.js"
      - "bin/**"
      - "template/**"
      - "package.json"
      - "README.md"

jobs:
  check-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper diff analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          registry-url: "https://registry.npmjs.org/"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: |
          # Basic validation test to ensure CLI can be run
          if [ -f "bin/cli.js" ]; then
            echo "Verifying CLI script is executable"
            chmod +x bin/cli.js
            
            # Check if the CLI loads without errors
            if node -e "try { require('./bin/cli.js'); console.log('CLI loads correctly'); process.exit(0); } catch(e) { console.error(e); process.exit(1); }"; then
              echo "✅ CLI validation passed"
            else
              echo "❌ CLI validation failed"
              exit 1
            fi
          fi

      - name: Check for version-requiring changes
        id: check-changes
        run: |
          # Get the files changed in the last commit
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)

          # Check for critical changes that require version bump
          REQUIRE_VERSION_UPDATE=false

          echo "Changed files:"
          echo "$CHANGED_FILES"

          if echo "$CHANGED_FILES" | grep -q "^index.js$"; then
            echo "index.js was modified - version update required"
            REQUIRE_VERSION_UPDATE=true
          fi

          if echo "$CHANGED_FILES" | grep -q "^bin/"; then
            echo "Files in bin/ directory were modified - version update required"
            REQUIRE_VERSION_UPDATE=true
          fi

          if echo "$CHANGED_FILES" | grep -q "^template/"; then
            echo "Files in template/ directory were modified - version update required"
            REQUIRE_VERSION_UPDATE=true
          fi

          # Check for important package.json changes (except version field itself)
          if echo "$CHANGED_FILES" | grep -q "^package.json$"; then
            # Get package.json differences excluding version field
            PKG_DIFF=$(git diff HEAD^ HEAD -- package.json | grep -v '"version":')
            
            # Check if there are meaningful changes to package.json (dependencies, etc.)
            if echo "$PKG_DIFF" | grep -q '"dependencies"\|"peerDependencies"\|"bin"\|"main"\|"exports"\|"type"\|"files"'; then
              echo "Important package.json fields were modified - version update required"
              REQUIRE_VERSION_UPDATE=true
            else
              echo "Only non-critical package.json changes detected - no version update required"
            fi
          fi

          echo "require_version_update=$REQUIRE_VERSION_UPDATE" >> $GITHUB_OUTPUT

      - name: Determine version type from conventional commits
        id: version-type
        if: steps.check-changes.outputs.require_version_update == 'true'
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)

          # Check for explicit version tags
          if echo "$COMMIT_MSG" | grep -q "#major"; then
            echo "version_type=major" >> $GITHUB_OUTPUT
            echo "Using major version update from #major tag"
          elif echo "$COMMIT_MSG" | grep -q "#minor"; then
            echo "version_type=minor" >> $GITHUB_OUTPUT
            echo "Using minor version update from #minor tag"
          elif echo "$COMMIT_MSG" | grep -q "#patch"; then
            echo "version_type=patch" >> $GITHUB_OUTPUT
            echo "Using patch version update from #patch tag"
          # Check for conventional commit format
          elif echo "$COMMIT_MSG" | grep -q "^feat!:"; then
            echo "version_type=major" >> $GITHUB_OUTPUT
            echo "Using major version update from breaking change commit"
          elif echo "$COMMIT_MSG" | grep -q "^feat:"; then
            echo "version_type=minor" >> $GITHUB_OUTPUT
            echo "Using minor version update from feature commit"
          elif echo "$COMMIT_MSG" | grep -q "^fix:"; then
            echo "version_type=patch" >> $GITHUB_OUTPUT
            echo "Using patch version update from fix commit"
          else
            echo "version_type=patch" >> $GITHUB_OUTPUT
            echo "Defaulting to patch version update"
          fi

      - name: Update package version
        if: steps.check-changes.outputs.require_version_update == 'true'
        id: update-version
        run: |
          VERSION_TYPE="${{ steps.version-type.outputs.version_type }}"
          echo "Updating version: $VERSION_TYPE"
          npm version $VERSION_TYPE

          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Push the version change back to the repository
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git push --follow-tags

          echo "Updated to version $NEW_VERSION"

      - name: Publish package with version update
        if: steps.check-changes.outputs.require_version_update == 'true'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish package without version update
        if: steps.check-changes.outputs.require_version_update == 'false'
        run: |
          # Check if any files were changed at all
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          if [ -n "$CHANGED_FILES" ]; then
            echo "Publishing without version update"
            npm publish --no-git-tag-version
          else
            echo "No changes detected, skipping publish"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create notification for successful publish
        if: success()
        run: |
          if [ "${{ steps.check-changes.outputs.require_version_update }}" == "true" ]; then
            echo "✅ Published nextjs-starter-pack v${{ steps.update-version.outputs.new_version }} to npm"
          else
            echo "✅ Updated nextjs-starter-pack on npm (same version)"
          fi
